@model BMEDmgt.Areas.MedEngMgt.Models.AssetMaintainContract

@{
    ViewBag.Title = "新增合約/設備維護合約";
}

<h2>新增合約</h2>

<div id="AttainDIV" hidden>
    <div id="pnlFILES" style="margin: 10pt">
    </div>
    <div class="form-group">
        <div>
            <input id="btnFILES" type="button" value="夾帶附件檔案" class="btn btn-default" data-toggle="modal" data-target="#modalFILES">
        </div>
    </div>
    <!-- 夾帶檔案 Modal -->
    <div id="modalFILES" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">選擇上傳檔案</h4>
                </div>
                <div class="modal-body">
                    @Html.Action("Upload", "AttainFiles", new { doctype = "7", docid = "000" })
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">離開</button>
                </div>
            </div>
        </div>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>設備維護合約</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ContractNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContractNo, new { htmlAttributes = new { @class = "form-control" } })<span id="CheckCNoResult"></span>
                @Html.ValidationMessageFor(model => model.ContractNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ContractName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ContractName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ContractName, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.HiddenFor(model => model.VendorId)
        <div id="CVendor" class="form-group">
            @Html.LabelFor(model => model.VendorName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 form-inline">
                @Html.EditorFor(model => model.VendorName, new { htmlAttributes = new { @class = "form-control" } })
                <input id="btnQtyVendor" type="button" value="查詢" class="btn btn-default" data-toggle="modal" data-target="#modalVENDOR">
                @Html.ValidationMessageFor(model => model.VendorName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VendorUniteNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VendorUniteNo, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.VendorUniteNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div id="pnlASSET" class="form-group">
            @Html.LabelFor(model => model.AssetNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 text-left">
                <div class="form-inline">
                    @Html.TextBox("AssetKeyName", "", new { @class = "form-control", placeholder = "財編或關鍵字" })
                    @Html.HiddenFor(model => model.AssetName)
                    <input id="btnQtyAsset" type="button" value="查詢" class="btn btn-default">
                    @Html.DropDownList("AssetNo", new List<SelectListItem> { new SelectListItem { Text = "", Value = "" } },
                                       "請選擇", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AssetNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Brand, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SeqNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SeqNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SeqNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Unite, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Unite, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Unite, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sdate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Sdate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sdate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Edate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Edate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Edate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cycle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Cycle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cycle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UseLife, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UseLife, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UseLife, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TotalCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.YearCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.YearCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.YearCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StagePayment, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StagePayment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StagePayment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StageCost, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StageCost, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StageCost, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndNotice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.RadioButton("EndNotice", "Y", true) 是
                @Html.RadioButton("EndNotice", "N") 否
                @Html.ValidationMessageFor(model => model.EndNotice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Note, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Note, 5, 50, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Note, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="新增" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("回到合約列表", "Index")
</div>


<!-- 廠商 Modal -->
<div id="modalVENDOR" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">選擇廠商</h4>
            </div>
            <div id="pnlSELECTVENDOR" class="modal-body">
                @Html.Action("QryVendor", "Vendors")
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(function () {
            /* Prevent submit for pressing Enter. */
            $('input').keypress(function (e) {
                code = e.keyCode ? e.keyCode : e.which; // in case of browser compatibility
                if (code == 13) {
                    e.preventDefault();
                    // do something
                    /* also can use return false; instead. */
                }
            });

            $(".datefield").datepicker({
                format: "yyyy/mm/dd"
            });

            $('.modal').on('shown.bs.modal', function () {
                //Make sure the modal and backdrop are siblings (changes the DOM)
                $(this).before($('.modal-backdrop'));
                //Make sure the z-index is higher than the backdrop
                $(this).css("z-index", parseInt($('.modal-backdrop').css('z-index')) + 1);
            });

            $('#modalVENDOR').on('hidden.bs.modal', function () {
                var vno = $("#Vno option:selected").val();
                var vname = $("#Vno option:selected").text();
                $("#VendorId").val(vno);
                $("#VendorName").val(vname);
                if (vno !== "") {
                    $.ajax({
                        contentType: "application/json; charset=utf-8",
                        url: '../Vendors/GetVendorUnite',
                        type: "GET",
                        data: { id: vno },
                        dataType: "json",
                        success: function (data) {
                            $('#VendorUniteNo').val(data);
                        }
                    });
                }
            });

            $("#btnQtyAsset").click(function () {
                var keynam = $("#AssetKeyName").val();
                if (keynam !== "") {
                    $.ajax({
                        contentType: "application/json; charset=utf-8",
                        url: '../Assets/GetAssetsByKeyname',
                        type: "GET",
                        data: { keyname: keynam },
                        dataType: "json",
                        success: function (data) {
                            //var s = '[{"ListKey":"44","ListValue":"test1"},{"ListKey":"87","ListValue":"陳奕軒"}]';
                            var jsdata = JSON.parse(data);
                            var appenddata;
                            appenddata += "<option value = '000'>請選擇</option>";
                            $.each(jsdata, function (key, value) {
                                appenddata += "<option value = '" + value.AssetNo + "'>" + value.Cname + " </option>";
                            });
                            $('#AssetNo').html(appenddata);
                        },
                        error: function (msg) {
                            alert(msg);
                        }
                    });
                }
            });
            $('#modalFILES').on('hidden.bs.modal', function () {
                var docid = $("#DocId").val();
                $.ajax({
                    url: '../AttainFiles/List2',
                    type: "POST",
                    data: { id: docid, typ: "7" },
                    success: function (data) {
                        $("#pnlFILES").html(data);
                        CheckFileList();
                    }
                });
            });
            $("#ContractNo").change(function () {
                var keynam = $(this).val();
                if (keynam !== "") {
                    $.ajax({
                        url: '../AssetMaintainContracts/CheckCNo',
                        type: "GET",
                        dataType: "json",
                        data: { id: keynam },
                        success: function (data) {
                            $("#CheckCNoResult").html(data.data);
                            if (!data.success) {
                                $("#AttainDIV").hide();
                            }
                            else {
                                $("#AttainDIV").show();
                                $("#DocId").val(keynam);
                            }
                        },
                        error: function (msg) {
                            alert(msg);
                        }
                    });
                }
            });

            $("#pnlFILES").on("click", "a", function () {
                CheckFileList2();
            });
        });

        function CheckFileList() {
            var docid = $("#DocId").val();
            $.ajax({
                url: '../AttainFiles/CountFile',
                type: "POST",
                data: { id: docid, typ: "7" },
                success: function (data) {
                    if (data != "0") {
                        $("#ContractNo").attr("readonly", "readonly");
                    }
                    else {
                        $("#ContractNo").removeAttr("readonly");
                    }
                }
            });
        }

        function CheckFileList2() {
            var docid = $("#DocId").val();
            $.ajax({
                url: '../AttainFiles/CountFile',
                type: "POST",
                data: { id: docid, typ: "7" },
                success: function (data) {
                    if (data != "1") {
                        $("#ContractNo").attr("readonly", "readonly");
                    }
                    else {
                        $("#ContractNo").removeAttr("readonly");
                    }
                }
            });
        }

    </script>
    @Scripts.Render("~/bundles/jqueryval")
}